cmake_minimum_required(VERSION 3.24)

find_package(Vulkan REQUIRED OPTIONAL_COMPONENTS glslc glslangValidator)

# Check if the CMP0077 policy is set and if not, set it to NEW
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

string(TIMESTAMP maj "%Y")
string(TIMESTAMP min "%m")
string(TIMESTAMP rev "%d")

project(DragonEngine VERSION ${maj}.${min}.${rev}.0)
set(Dragon_FOUND CACHE BOOL "" ON)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    set(FMT_MASTER_PROJECT ON)
    message(STATUS "CMake version: ${CMAKE_VERSION}")
endif ()

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_C_STANDARD 23)

if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    message(STATUS "Build started for ${PROJECT_NAME} Version ${PROJECT_VERSION}")
endif()

option(Dragon_INSTALL "Toggle to optionally configure the install files for DragonEngine" ON)
option(Dragon_PACKAGE_BUILD "Toggle to optionally configure the CPack generator files"  ON)
option(Dragon_BUILD_EXAMPLES "Toggle to optionally build all the examples (dginfo is always built)" ON)
option(Dragon_BUILD_TESTS "Toggle to optionally not build the tests for DragonEngine" ON)
option(Dragon_BUILD_DOCS "Toggle to optionally build the documentation (has no effect without Doxygen)" ON)
option(Dragon_BUILD_DEPENDENCY_DOCS "Toggle to optionally build the documentation for Dragon's source dependencies (VkBootstrap, VMA, etc.)" OFF)
option(Dragon_NO_VULKAN "Toggle to build DragonEngine without any Vulkan or VMA support" OFF)

message(CHECK_START "Finding Dragon Submodules")
unset(missingComponents)

message(CHECK_START "Finding Dragon::Audio")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/audio/CMakeLists.txt)
    set(DragonAudio_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/audio)
else()
    find_package(DragonEngine COMPONENTS Audio QUIET)
    if(DragonAudio_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Compute")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/compute/CMakeLists.txt)
    set(DragonCompute_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/compute)
else()
    find_package(DragonEngine COMPONENTS Compute QUIET)
    if(DragonCompute_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Core")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/core/CMakeLists.txt)
    set(DragonCore_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/core)
else()
    find_package(DragonEngine COMPONENTS Core QUIET)
    if(DragonCore_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Graphics")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/graphics/CMakeLists.txt)
    set(DragonGraphics_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/graphics)
else()
    find_package(DragonEngine COMPONENTS Graphics QUIET)
    if(DragonGraphics_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Particle")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/particle/CMakeLists.txt)
    set(DragonParticle_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/particle)
else()
    find_package(DragonEngine COMPONENTS Particle QUIET)
    if(DragonParticle_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Physics")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/physics/CMakeLists.txt)
    set(DragonPhysics_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/physics)
else()
    find_package(DragonEngine COMPONENTS Physics QUIET)
    if(DragonPhysics_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

message(CHECK_START "Finding Dragon::Raytrace")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/raytrace/CMakeLists.txt)
    set(DragonRaytrace_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/raytrace)
else()
    find_package(DragonEngine COMPONENTS Raytrace QUIET)
    if(DragonRaytrace_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

list(POP_BACK CMAKE_MESSAGE_INDENT)
if(missingComponents)
    message(CHECK_FAIL "missing components: ${missingComponents}")
else()
    message(CHECK_PASS "all components found")
endif()

if(Dragon_BUILD_TESTS)
    add_subdirectory(tests)
endif()

if(Dragon_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(Dragon_BUILD_DOCS)
    add_subdirectory(docs)
endif()

if(Dragon_INSTALL)
    include(cmake/install.cmake)
endif()