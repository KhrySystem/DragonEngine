cmake_minimum_required(VERSION 3.24)

# Check if the CMP0077 policy is set and if not, set it to NEW
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

project(DragonEngine VERSION 0.1.0.0)
set(Dragon_FOUND CACHE BOOL "" ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_C_STANDARD 23)

message(STATUS "Build started for ${PROJECT_NAME} Version ${PROJECT_VERSION}")

option(Dragon_INSTALL "Toggle to optionally configure the install files for DragonEngine" ON)
option(Dragon_2D_RENDER "Toggle to optionally force only 2D graphics (No camera initialization, shaders take in 2d position, etc.)"  ON)
option(Dragon_PACKAGE_BUILD "Toggle to optionally configure the CPack generator files"  OFF)
option(Dragon_BUILD_EXAMPLES "Toggle to optionally build all the examples (dginfo is always built)" ON)
option(Dragon_BUILD_TESTS "Toggle to optionally not build the tests for DragonEngine" OFF)
option(Dragon_BUILD_DOCS "Toggle to optionally build the documentation (has no effect without Doxygen)" OFF)
option(Dragon_BUILD_DEPENDENCY_DOCS "Toggle to optionally build the documentation for Dragon's source dependencies (VkBootstrap, VMA, etc.)" OFF)
option(Dragon_NO_VULKAN "Toggle to build DragonEngine without any Vulkan or VMA support" OFF)
if(NOT DEFINED Dragon_MAX_POINT_LIGHTS)
	set(Dragon_MAX_POINT_LIGHTS 128)
endif()

if(NOT DEFINED Dragon_MAX_DIRECTIONAL_LIGHTS)
	set(Dragon_MAX_DIRECTIONAL_LIGHTS 4)
endif()
message(STATUS "Dragon_INSTALL: ${Dragon_INSTALL}")
message(STATUS "Dragon_2D_RENDER: ${Dragon_2D_RENDER}")
message(STATUS "Dragon_PACKAGE_BUILD: ${Dragon_PACKAGE_BUILD}")
message(STATUS "Dragon_BUILD_EXAMPLES: ${Dragon_BUILD_EXAMPLES}")
message(STATUS "Dragon_BUILD_TESTS: ${Dragon_BUILD_TESTS}")
message(STATUS "Dragon_BUILD_DOCS: ${Dragon_BUILD_DOCS}")
message(STATUS "Dragon_MAX_POINT_LIGHTS: ${Dragon_MAX_POINT_LIGHTS}")
message(STATUS "Dragon_MAX_DIRECTIONAL_LIGHTS: ${Dragon_MAX_DIRECTIONAL_LIGHTS}")

message(CHECK_START "Finding Dragon Submodules")
unset(missingComponents)

message(CHECK_START "Finding Dragon::Core")
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/core/CMakeLists.txt)
    set(DragonCore_FOUND CACHE BOOL "" ON)
    message(CHECK_PASS "found sources")
    add_subdirectory(modules/core)
else()
    find_package(DragonCore)
    if(DragonCore_FOUND)
        message(CHECK_PASS "found binaries")
    else()
        message(CHECK_FAIL "not found")
    endif()
endif()

if(DragonCore_FOUND)
    message(CHECK_START "Finding Dragon::Graphics")
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/graphics/CMakeLists.txt)
        set(DragonGraphics_FOUND CACHE BOOL "" ON)
        message(CHECK_PASS "found sources")
        add_subdirectory(modules/graphics)
    else()
        find_package(DragonGraphics)
        if(DragonGraphics_FOUND)
            message(CHECK_PASS "found binaries")
        else()
            message(CHECK_FAIL "not found")
        endif()
    endif()
endif()

list(POP_BACK CMAKE_MESSAGE_INDENT)
if(missingComponents)
    message(CHECK_FAIL "missing components: ${missingComponents}")
else()
    message(CHECK_PASS "all components found")
endif()

if(Dragon_BUILD_TESTS)
    add_subdirectory(tests)
endif()

if(Dragon_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(Dragon_BUILD_DOCS)
    add_subdirectory(docs)
endif()

if(Dragon_INSTALL)
    include(GNUInstallDirs)
    include(cmake/install.cmake)
    if(Dragon_PACKAGE_BUILD)
        include(cmake/package.cmake)
    endif()
endif()