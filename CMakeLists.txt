cmake_minimum_required(VERSION 3.25)

# Check if the CMP0077 policy is set and if not, set it to NEW
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

project(DragonEngine VERSION 1.0.0.0)
set(Dragon_FOUND ON)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_C_STANDARD 23)

message(STATUS "Build started for ${PROJECT_NAME} Version ${PROJECT_VERSION}")

option(Dragon_INSTALL "Toggle to optionally configure the install files for DragonEngine" ON)
option(Dragon_2D_RENDER "Toggle to optionally force only 2D graphics (No camera initialization)"  ON)
option(Dragon_PACKAGE_BUILD "Toggle to optionally configure the CPack generator files"  OFF)
option(Dragon_BUILD_EXAMPLES "Toggle to optionally build all the examples (dginfo is always built)" ON)
option(Dragon_BUILD_TESTS "Toggle to optionally build the tests for DragonEngine" OFF)
option(Dragon_BUILD_DOCS "Toggle to optionally build the documentation (has no effect without Doxygen)" OFF)
option(Dragon_NO_VULKAN "Toggle to build DragonEngine without any Vulkan or VMA support" OFF)
if(NOT DEFINED Dragon_MAX_POINT_LIGHTS)
	set(Dragon_MAX_POINT_LIGHTS 128)
endif()

if(NOT DEFINED Dragon_MAX_DIRECTIONAL_LIGHTS)
	set(Dragon_MAX_DIRECTIONAL_LIGHTS 4)
endif()
message(STATUS "Dragon_INSTALL: ${Dragon_INSTALL}")
message(STATUS "Dragon_2D_RENDER: ${Dragon_2D_RENDER}")
message(STATUS "Dragon_PACKAGE_BUILD: ${Dragon_PACKAGE_BUILD}")
message(STATUS "Dragon_BUILD_EXAMPLES: ${Dragon_BUILD_EXAMPLES}")
message(STATUS "Dragon_BUILD_TESTS: ${Dragon_BUILD_TESTS}")
message(STATUS "Dragon_BUILD_DOCS: ${Dragon_BUILD_DOCS}")
message(STATUS "Dragon_MAX_POINT_LIGHTS: ${Dragon_MAX_POINT_LIGHTS}")
message(STATUS "Dragon_MAX_DIRECTIONAL_LIGHTS: ${Dragon_MAX_DIRECTIONAL_LIGHTS}")



if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/core/CMakeLists.txt)
    set(DragonCore_FOUND ON)
    message(STATUS "FOUND Dragon::Core for building")
    add_subdirectory(modules/core)
else()
    find_package(DragonCore)
    if(DragonCore_FOUND)
        message(STATUS "FOUND Dragon::Core pre-built")
    else()
        message(WARNING "DID NOT FIND Dragon::Core")
    endif()
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/audio/CMakeLists.txt)
    set(DragonAudio_FOUND ON)
    message(STATUS "FOUND Dragon::Audio for building")
    add_subdirectory(modules/audio)
else()
    find_package(DragonAudio)
    if(DragonAudio_FOUND)
        message(STATUS "FOUND Dragon::Audio pre-built")
    else()
        message(WARNING "DID NOT FIND Dragon::Audio")
    endif()
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/compute/CMakeLists.txt)
    set(DragonCompute_FOUND ON)
    message(STATUS "FOUND Dragon::Compute for building")
    add_subdirectory(modules/compute)
else()
    find_package(DragonCompute)
    if(DragonCompute_FOUND)
        message(STATUS "FOUND Dragon::Compute pre-built")
    else()
        message(WARNING "DID NOT FIND Dragon::Compute")
    endif()
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/graphics/CMakeLists.txt)
    set(DragonGraphics_FOUND ON)
    message(STATUS "FOUND Dragon::Graphics for building")
    add_subdirectory(modules/graphics)
else()
    find_package(DragonGraphics)
    if(DragonGraphics_FOUND)
        message(STATUS "FOUND Dragon::Graphics pre-built")
    else()
        message(WARNING "DID NOT FIND Dragon::Graphics")
    endif()
endif()
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/modules/physics/CMakeLists.txt)
    message(STATUS "FOUND Dragon::Physics for building")
    add_subdirectory(modules/physics)
else()
    find_package(DragonPhysics)
    if(DragonPhysics_FOUND)
        message(STATUS "FOUND Dragon::Physics pre-built")
    else()
        message(WARNING "DID NOT FIND Dragon::Physics")
    endif()
endif()

include(GNUInstallDirs)

if(Dragon_INSTALL)
    if(NOT CMAKE_INSTALL_INCLUDEDIR)
        set(CMAKE_INSTALL_INCLUDEDIR include)
    endif()
    include(cmake/install.cmake)
endif()
if(Dragon_INSTALL AND Dragon_PACKAGE_BUILD) 
    include(cmake/package.cmake)
endif()